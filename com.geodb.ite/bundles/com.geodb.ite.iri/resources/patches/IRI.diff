--- src/com/iota/iri/IRI.java
+++ src/com/iota/iri/IRI.java
@@ -24,6 +24,15 @@
     public static final String TESTNET_NAME = "IRI Testnet";
     public static final String VERSION = "1.5.3";
 
+    // TODO ITE
+    public static boolean initializedIOTA = false;
+    public static boolean initializedAPI = false;
+    public static boolean initializedIXI = false;
+    public static Iota iota;
+    public static API api;
+    public static IXI ixi;
+    public static Configuration configuration;
+
     public static void main(String[] args) throws Exception {
         // Logging is configured first before any references to Logger or LoggerFactory.
         // Any public method or field accessors needed in IRI should be put in IRI and then delegate to IRILauncher. That
@@ -59,11 +68,6 @@
     private static class IRILauncher {
         private static final Logger log = LoggerFactory.getLogger(IRILauncher.class);
 
-        public static Iota iota;
-        public static API api;
-        public static IXI ixi;
-        public static Configuration configuration;
-
         private static final String TESTNET_FLAG_REQUIRED = "--testnet flag must be turned on to use ";
 
         public static void main(final String[] args) throws Exception {
@@ -78,7 +82,6 @@
             iota = new Iota(configuration);
             ixi = new IXI(iota);
             api = new API(iota, ixi);
-            shutdownHook();
 
             if (configuration.booling(DefaultConfSettings.DEBUG)) {
                 log.info("You have set the debug flag. To enable debug output, you need to uncomment the DEBUG appender in the source tree at iri/src/main/resources/logback.xml and re-package iri.jar");
@@ -105,13 +108,27 @@
                 }
             }
 
+            // TODO ITE
             try {
+                log.info("iota.init() ...");
                 iota.init();
+                initializedIOTA = true;
+                log.info("iota.init() done");
+
+                log.info("api.init() ...");
                 api.init();
-                ixi.init(configuration.string(Configuration.DefaultConfSettings.IXI_DIR));
+                initializedAPI = true;
+                log.info("api.init() done");
+
+                log.info("ixi.init(...) ...");
+                log.info("IXI service is not enabled");
+                // ixi.init(configuration.string(Configuration.DefaultConfSettings.IXI_DIR));
+                initializedIXI= true;
+                log.info("ixi.init(...) done");
                 log.info("IOTA Node initialised correctly.");
             } catch (Exception e) {
                 log.error("Exception during IOTA node initialisation: ", e);
+                stop();
                 throw e;
             }
         }
@@ -363,7 +380,37 @@
         }
     }
 
+    public static boolean isInitialized() {
+        return initializedAPI && initializedIOTA && initializedIXI;
+    }
+
     public static boolean validateParams(Configuration configuration, String[] args) throws IOException {
         return IRILauncher.isValidated(configuration, args);
     }
+
+    // TODO ITE
+    public static void stop() {
+        if (initializedAPI || initializedIOTA || initializedIXI) {
+            Logger log = LoggerFactory.getLogger(IRI.class);
+            log.info("Shutting down IOTA node, please hold tight...");
+            try {
+                if (initializedIXI) {
+                    initializedIXI= false;
+                    // ixi.shutDown();
+                }
+
+                if (initializedAPI) {
+                    initializedAPI = false;
+                    api.shutDown();
+                }
+
+                if (initializedIOTA) {
+                    initializedIOTA = false;
+                    iota.shutdown();
+                }
+            } catch (final Exception e) {
+                log.error("Exception occurred shutting down IOTA node: ", e);
+            }
+        }
+    }
 }
